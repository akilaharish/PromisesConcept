{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../scripts/index.ts","../../scripts/interfaces.ts","../../scripts/Logger.ts","../../scripts/PromisesExample.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"app.d.ts\" /> \r\n\r\n$(document).ready(() => {\r\n    var startExample  = new PromisesExample();\r\n    startExample.Start();\r\n});","interface SomeDTOLikeObject {\r\n    Property1: string;\r\n    Property2: number;\r\n    IsSuccess:boolean;\r\n}","/// <reference path=\"app.d.ts\" />\r\n\r\nclass Logger {\r\n    private _serialNo: number = 1;\r\n    public Log = (message: string) => {\r\n        $(\"#divLog\").html($(\"#divLog\").html() + \"<br/><br/>\" + this._serialNo++ + \". \" + message);\r\n    }\r\n}","/// <reference path=\"app.d.ts\" /> \r\n\r\nclass PromisesExample {\r\n    private _loggerInstance: Logger;\r\n\r\n    constructor() {\r\n        this._loggerInstance = new Logger();\r\n    }\r\n\r\n    public Start = () => {\r\n        this._loggerInstance.Log(\"Main function Start started.\");\r\n\r\n        //Simple example where the defer is being resolved always. This is just to show how to use deferreds.\r\n        this.ShowSimpleExample();\r\n\r\n        //This is an example which shows how to handle the rejected deferred. \r\n        //First the method is called where we are asking it to resolve the deffered.\r\n        this.ShowResolveAndReject(true);\r\n\r\n        //Second we are asking the method to reject it. The same code above is pasted. But this time the error handler will be called.\r\n        this.ShowResolveAndReject(false);\r\n\r\n        //This is a method that can return data from the calling function\r\n        //First we are asking the method to resolve\r\n        this.ShowHowToReturnSimpleData(true);\r\n\r\n        //Second we are asking it to reject\r\n        this.ShowHowToReturnSimpleData(false);\r\n\r\n        //This is a method that can return complex object from the calling function\r\n        //First we are asking the method to resolve\r\n        this.ShowHowToReturnComplexObject(true);\r\n\r\n        //Second we are asking it to reject\r\n        this.ShowHowToReturnComplexObject(false);\r\n\r\n        //This is a method that can return complex object or a string from the calling function\r\n        //First we are asking the method to resolve\r\n        this.ShowHowToHandleDifferentReturnTypes(true);\r\n\r\n        //Second we are asking it to reject\r\n        this.ShowHowToHandleDifferentReturnTypes(false);\r\n\r\n        this._loggerInstance.Log(\"Main function Start ended.\");\r\n    }\r\n\r\n    private DeferThatOnlyResolves = (): JQueryPromise<void> => {\r\n        var d = $.Deferred<void>();\r\n\r\n        setTimeout(() => {\r\n            this._loggerInstance.Log(\"Inside DeferThatOnlyResolves:: Timeout done. Resolving the deferred.\");\r\n            d.resolve();\r\n        }, 1000);\r\n\r\n        return d.promise();\r\n    }\r\n\r\n    private ShowSimpleExample = (): void => {\r\n        this.DeferThatOnlyResolves().always(\r\n            () => { //Gets called always. Whether a defer gets resolved or rejected\r\n                this._loggerInstance.Log(\"DeferThatOnlyResolves resolved the deffered and control came to Start.\");\r\n            });\r\n    }\r\n\r\n    private DeferThatCanResolveOrReject = (shouldResolve: boolean): JQueryPromise<void> => {\r\n        var d = $.Deferred<void>();\r\n\r\n        setTimeout(() => {\r\n            if (shouldResolve) {\r\n                this._loggerInstance.Log(\"Inside DeferThatCanResolveOrReject:: Timeout done. Resolving the deferred.\");\r\n                d.resolve();\r\n            }\r\n            else {\r\n                this._loggerInstance.Log(\"Inside DeferThatCanResolveOrReject:: Timeout done. Rejecting the deferred.\");\r\n                d.reject();\r\n            }\r\n        }, 2000);\r\n\r\n        return d.promise();\r\n    }\r\n\r\n    private ShowResolveAndReject = (shouldResolve: boolean): void => {\r\n        this.DeferThatCanResolveOrReject(shouldResolve).then(\r\n            () => {//This is the success handler. Called when the defer is resolved.\r\n                this._loggerInstance.Log(\"DeferThatCanResolveOrReject resolved the deffered and control came to Start.\");\r\n            },\r\n            () => {//This is the error handler. Called when the defer is rejected.\r\n                this._loggerInstance.Log(\"DeferThatCanResolveOrReject rejected the deffered and control came to Start.\");\r\n            });\r\n    }\r\n\r\n    private DeferThatReturnsDataToMainMethod = (shouldResolve: boolean): JQueryPromise<string> => {\r\n        var d = $.Deferred<string>();\r\n\r\n        setTimeout(() => {\r\n            this._loggerInstance.Log(\"Inside DeferThatReturnsDataToMainMethod:: will return some string.\");\r\n            if (shouldResolve) {\r\n                d.resolve(\"Yeaaa I got resolved... Message from the beyond...\");\r\n            }\r\n            else {\r\n                d.reject(\"OOPS! I got rejected... This is also a message form beyond\");\r\n            }\r\n        }, 4000);\r\n\r\n        return d.promise();\r\n    }\r\n\r\n    private ShowHowToReturnSimpleData = (shouldResolve: boolean): void => {\r\n        this.DeferThatReturnsDataToMainMethod(shouldResolve).then(\r\n            (message: string) => {//This is the success handler. Called when the defer is resolved.\r\n                this._loggerInstance.Log(\"DeferThatReturnsDataToMainMethod resolved with message - \" + message);\r\n            },\r\n            (message: string) => {//This is the error handler. Called when the defer is rejected.\r\n                this._loggerInstance.Log(\"DeferThatReturnsDataToMainMethod rejected with message - \" + message);\r\n            });\r\n    }\r\n\r\n    private DeferThanCanReturnComplexObject = (shouldResolve: boolean): JQueryPromise<SomeDTOLikeObject> => {\r\n        var d = $.Deferred<SomeDTOLikeObject>();\r\n\r\n        setTimeout(() => {\r\n            this._loggerInstance.Log(\"Inside DeferThanCanReturnComplexObject:: will return object.\");\r\n            var returnObj: SomeDTOLikeObject = {\r\n                Property1: \"\",\r\n                Property2: 10,\r\n                IsSuccess: shouldResolve\r\n            };\r\n            if (shouldResolve) {\r\n                returnObj.Property1 = \"Yeaaa I got resolved... Message from the beyond...\";\r\n                d.resolve(returnObj);\r\n            }\r\n            else {\r\n                returnObj.Property1 = \"OOPS! I got rejected... This is also a message form beyond\";\r\n                d.reject(returnObj);\r\n            }\r\n        }, 4300);\r\n\r\n        return d.promise();\r\n    }\r\n\r\n    private ShowHowToReturnComplexObject = (shouldResolve: boolean): void => {\r\n        this.DeferThanCanReturnComplexObject(shouldResolve).then(\r\n            (returnDTO: SomeDTOLikeObject) => {//This is the success handler. Called when the defer is resolved.\r\n                this._loggerInstance.Log(\"DeferThanCanReturnComplexObject resolved with message - \" + JSON.stringify(returnDTO));\r\n            },\r\n            (returnDTO: SomeDTOLikeObject) => {//This is the error handler. Called when the defer is rejected.\r\n                this._loggerInstance.Log(\"DeferThanCanReturnComplexObject rejected with message - \" + JSON.stringify(returnDTO));\r\n            });\r\n    }\r\n\r\n    private DeferThatCanReturnMultipleTypesOfData = (shouldResolve: boolean): JQueryPromise<SomeDTOLikeObject | string> => {\r\n        var d = $.Deferred<SomeDTOLikeObject | string>();\r\n\r\n        setTimeout(() => {\r\n\r\n            if (shouldResolve) {\r\n                this._loggerInstance.Log(\"Inside DeferThatCanReturnMultipleTypesOfData:: will return object.\");\r\n                var returnObj: SomeDTOLikeObject = {\r\n                    Property1: \"Yeaaa I got resolved... Message from the beyond...\",\r\n                    Property2: 12,\r\n                    IsSuccess: shouldResolve\r\n                };\r\n                d.resolve(returnObj);\r\n            }\r\n            else {\r\n                this._loggerInstance.Log(\"Inside DeferThatCanReturnMultipleTypesOfData:: will return string.\");\r\n                d.reject(\"OOPS! I got rejected... This is also a message form beyond\");\r\n            }\r\n        }, 4300);\r\n\r\n        return d.promise();\r\n    }\r\n\r\n    private ShowHowToHandleDifferentReturnTypes = (shouldResolve: boolean): void => {\r\n        this.DeferThatCanReturnMultipleTypesOfData(shouldResolve).then(\r\n            (returnDTO: SomeDTOLikeObject) => {//This is the success handler. Called when the defer is resolved.\r\n                this._loggerInstance.Log(\"DeferThatCanReturnMultipleTypesOfData resolved with message - \" + JSON.stringify(returnDTO));\r\n            },\r\n            (resultMessage: string) => {//This is the error handler. Called when the defer is rejected.\r\n                this._loggerInstance.Log(\"DeferThatCanReturnMultipleTypesOfData rejected with message - \" + resultMessage);\r\n            });\r\n    }\r\n}"]}